var mychart=(()=>{const defines={};const entry=[null];function define(name,dependencies,factory){defines[name]={dependencies,factory};entry[0]=name;}
define("require",["exports"],(exports)=>{Object.defineProperty(exports,"__cjsModule",{value:true});Object.defineProperty(exports,"default",{value:(name)=>resolve(name)});});define("data-source",["require","exports"],function(require,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.buildDataSource=void 0;const MUTATING_ARR_FNS=["pop","push","concat","reverse","shift","sort","splice","unshift",];const BAR_SIZE=6;function buildDataSource(){let data=[];let bar=new Float32Array(BAR_SIZE),bar2x_cpu,bar2x,bar3x_cpu,bar3x;let ids_cpu,ids;let is_dirty=true;function refresh(regl){bar2x_cpu=new Float32Array(2*data.length*BAR_SIZE);bar3x_cpu=new Float32Array(3*data.length*BAR_SIZE);let N=Math.max(ids_cpu&&ids_cpu.length||100,100);if(!ids_cpu||ids_cpu.length<N){ids_cpu=new Float32Array(N*2);for(let i=0;i<N*2;++i)
ids_cpu[i]=i;ids=(ids&&ids(ids_cpu))||regl.buffer(ids_cpu);}
for(let i=0;i<data.length;++i){bar[0]=data[i].epoch;bar[1]=data[i].open;bar[2]=data[i].high;bar[3]=data[i].low;bar[4]=data[i].close;bar[5]=data[i].volume;bar2x_cpu.set(bar,(2*i+0)*BAR_SIZE);bar2x_cpu.set(bar,(2*i+1)*BAR_SIZE);bar3x_cpu.set(bar,(3*i+0)*BAR_SIZE);bar3x_cpu.set(bar,(3*i+1)*BAR_SIZE);bar3x_cpu.set(bar,(3*i+2)*BAR_SIZE);}
bar2x=(bar2x&&bar2x(bar2x_cpu))||regl.buffer(bar2x_cpu);bar3x=(bar3x&&bar3x(bar2x_cpu))||regl.buffer(bar3x_cpu);}
function buffers(regl){if(is_dirty){refresh(regl);is_dirty=false;}
return{ids,bar2x,bar3x,bar2x_cpu,bar3x_cpu};}
data.buffers=buffers;return new Proxy(data,{get(target,key,receiver){if(!is_dirty&&MUTATING_ARR_FNS.includes(key)){is_dirty=true;}
return Reflect.get(target,key,receiver);},set(target,idx,value,receiver){if(typeof idx==="number"){is_dirty=true;}
return Reflect.set(target,idx,value,receiver);},});}
exports.buildDataSource=buildDataSource;});define("index",["require","exports"],function(require,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.Triangle=exports.temp=void 0;exports.temp=5;exports.Triangle={frag:`precision mediump float;uniform vec4 color;void main(){gl_FragColor=color;}`,vert:`precision mediump float;uniform vec2 resolution;attribute vec2 position;void main(){vec2 result=2.0*position/resolution-1.0;gl_Position=vec4(result,0,1);}`,attributes:{position:(_,{position})=>position,},uniforms:{color:(_,{color})=>color,resolution:(ctx)=>[ctx.viewportWidth,ctx.viewportHeight],},count:3,};});'marker:resolver';function get_define(name){if(defines[name]){return defines[name];}
else if(defines[name+'/index']){return defines[name+'/index'];}
else{const dependencies=['exports'];const factory=(exports)=>{try{Object.defineProperty(exports,"__cjsModule",{value:true});Object.defineProperty(exports,"default",{value:require(name)});}
catch(_a){throw Error(['module "',name,'" not found.'].join(''));}};return{dependencies,factory};}}
const instances={};function resolve(name){if(instances[name]){return instances[name];}
if(name==='exports'){return{};}
const define=get_define(name);instances[name]={};const dependencies=define.dependencies.map(name=>resolve(name));define.factory(...dependencies);const exports=dependencies[define.dependencies.indexOf('exports')];instances[name]=(exports['__cjsModule'])?exports.default:exports;return instances[name];}
if(entry[0]!==null){return resolve(entry[0]);}})();