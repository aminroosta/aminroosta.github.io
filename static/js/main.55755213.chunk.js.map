{"version":3,"sources":["editor.tsx","index.tsx"],"names":["editorDidMount","editor","monaco","languages","typescript","javascriptDefaults","setDiagnosticsOptions","noSemanticValidation","noSyntaxValidation","setCompilerOptions","target","ScriptTarget","ES6","allowNonTsExtensions","library","fetch","then","v","text","lib_ts","replace","lib_uri","addExtraLib","createModel","Uri","parse","focus","Editor","useState","code","setCode","useEffect","width","height","language","theme","value","options","selectOnLineNumbers","minimap","enabled","onChange","newCode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAGA,SAASA,EAAeC,EAA6CC,GAEjEA,EAAOC,UAAUC,WAAWC,mBAAmBC,sBAAsB,CACjEC,sBAAsB,EACtBC,oBAAoB,IAGxBN,EAAOC,UAAUC,WAAWC,mBAAmBI,mBAAmB,CAC9DC,OAAQR,EAAOC,UAAUC,WAAWO,aAAaC,IACjDC,sBAAsB,IAE1B,IAAMC,EAAU,UAChBC,MAAM,gCAAD,OAAiCD,EAAjC,YAA4CA,EAA5C,UACAE,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACFA,EAASA,EAAOC,QAAQ,yBAAf,0BAA4DN,EAA5D,MACT,IAAIO,EAAO,sBAAkBP,EAAlB,SACXZ,EAAOC,UAAUC,WAAWC,mBAAmBiB,YAAYH,EAAQE,GACnEnB,EAAOD,OAAOsB,YAAYJ,EAAQ,aAAcjB,EAAOsB,IAAIC,MAAMJ,OAEzEpB,EAAOyB,QAGJ,SAASC,IAAU,IAAD,EACCC,mBAAS,kBADV,mBAChBC,EADgB,KACVC,EADU,KAGrBC,qBAAU,WACNhB,MAAM,cAAcC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAAQF,KAAKc,KAC9C,IAUH,OACI,cAAC,IAAD,CACIE,MAAM,MACNC,OAAO,MACPC,SAAS,aACTC,MAAM,WACNC,MAAOP,EACPQ,QAX4D,CAChEC,qBAAqB,EACrBC,QAAS,CAAEC,SAAS,IAUhBC,SAhBR,SAAkBC,GAEdZ,EAAQY,IAeJ1C,eAAgBA,I,OC7C5B2C,IAASC,OACL,eAAC,IAAMC,WAAP,WACI,gDACA,cAAClB,EAAD,OAEJmB,SAASC,eAAe,W","file":"static/js/main.55755213.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MonacoEditor, { monaco } from 'react-monaco-editor';\n\nfunction editorDidMount(editor: monaco.editor.IStandaloneCodeEditor, monaco: any) {\n    // validation settings\n    monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n        noSemanticValidation: true,\n        noSyntaxValidation: false\n    });\n    // compiler options\n    monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\n        target: monaco.languages.typescript.ScriptTarget.ES6,\n        allowNonTsExtensions: true\n    });\n    const library = 'mychart';\n    fetch(`https://aminroosta.github.io/${library}/${library}.d.ts`)\n        .then(v => v.text())\n        .then(lib_ts => {\n            lib_ts = lib_ts.replace('declare module \"index\"', `declare module \"${library}\"`);\n            var lib_uri = `ts:filename/${library}.d.ts`;\n            monaco.languages.typescript.javascriptDefaults.addExtraLib(lib_ts, lib_uri);\n            monaco.editor.createModel(lib_ts, 'typescript', monaco.Uri.parse(lib_uri));\n        })\n    editor.focus();\n}\n\nexport function Editor() {\n    let [code, setCode] = useState('// loading ...');\n\n    useEffect(() => {\n        fetch('example.ts').then(v => v.text()).then(setCode);\n    }, []);\n\n    function onChange(newCode: string) {\n        // TODO: render live\n        setCode(newCode);\n    }\n    const options: monaco.editor.IStandaloneEditorConstructionOptions = {\n        selectOnLineNumbers: true,\n        minimap: { enabled: false }\n    };\n    return (\n        <MonacoEditor\n            width=\"500\"\n            height=\"400\"\n            language=\"typescript\"\n            theme=\"vs-light\"\n            value={code}\n            options={options}\n            onChange={onChange}\n            editorDidMount={editorDidMount}\n        />\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Editor } from './editor';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <h1>my chart demo:</h1>\n        <Editor />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}